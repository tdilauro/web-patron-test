name: Test and Build

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: test-${{ github.ref_name }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  # changelog must be edited for every PR
#  changelog:
#    name: Updates Changelog
#    runs-on: ubuntu-latest
#    steps:
#      - uses: dangoslen/changelog-enforcer@v3
#        with:
#          changeLogPath: "CHANGELOG.md"
#          skipLabels: "no-changelog"
#
#  node_setup:
#    name: Node Setup
#    runs-on: ubuntu-latest
#    outputs:
#      node_version: ${{ steps.nvmrc.outputs.NODE_VERSION }}
#    steps:
#      - uses: actions/checkout@v4
#
#      - id: nvmrc
#        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_OUTPUT
#
#      - name: Use Node Version from nvmrc
#        uses: actions/setup-node@v4
#        with: { node-version: "${{ steps.nvmrc.outputs.NODE_VERSION }}" }
#
#      - name: Cache node modules
#        uses: actions/cache@v4
#        env:
#          cache-name: cache-node-modules
#        with:
#          # npm cache files are stored in `~/.npm` on Linux/macOS
#          path: ~/.npm
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-build-${{ env.cache-name }}-
#            ${{ runner.os }}-build-
#            ${{ runner.os }}-
#
#  lint:
#    name: Lint
#    needs: node_setup
#    runs-on: ubuntu-latest
#    env:
#      CI: true
#    steps:
#      - uses: actions/checkout@v4
#
#      - uses: actions/setup-node@v4
#        with: { node-version: "${{ needs.node_setup.outputs.node_version }}" }
#
#      - uses: actions/cache@v4
#        env:
#          cache-name: cache-node-modules
#        with:
#          path: ~/.npm
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-build-${{ env.cache-name }}-
#            ${{ runner.os }}-build-
#            ${{ runner.os }}-
#
#      - name: Install Dependencies
#        run: npm ci
#
#      - name: Lint
#        run: npm run lint
#
#  typecheck:
#    name: Typecheck
#    needs: node_setup
#    runs-on: ubuntu-latest
#    env:
#      CI: true
#    steps:
#      - uses: actions/checkout@v4
#
#      - uses: actions/setup-node@v4
#        with: { node-version: "${{ needs.node_setup.outputs.node_version }}" }
#
#      - uses: actions/cache@v4
#        env:
#          cache-name: cache-node-modules
#        with:
#          path: ~/.npm
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-build-${{ env.cache-name }}-
#            ${{ runner.os }}-build-
#            ${{ runner.os }}-
#
#      - name: Install Dependencies
#        run: npm ci
#
#      - name: Typecheck
#        run: node_modules/typescript/bin/tsc --noEmit
#
#  test:
#    name: Test & Coverage
#    needs: node_setup
#    runs-on: ubuntu-latest
#    env:
#      CI: true
#    steps:
#      - uses: actions/checkout@v4
#
#      - uses: actions/setup-node@v4
#        with: { node-version: "${{ needs.node_setup.outputs.node_version }}" }
#
#      - uses: actions/cache@v4
#        env:
#          cache-name: cache-node-modules
#        with:
#          path: ~/.npm
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-build-${{ env.cache-name }}-
#            ${{ runner.os }}-build-
#            ${{ runner.os }}-
#
#      - name: Install Dependencies
#        run: npm ci
#
#      - name: Test
#        run: npm run test:ci -- --coverage
#
#      - name: Coveralls Report
#        uses: coverallsapp/github-action@master
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish image to Docker registry
#    needs: [lint, typecheck, test]

    env:
      REGISTRY_HOST: ghcr.io
      IMAGE_PUSH_ENABLED: ${{ secrets.NO_DOCKER_IMAGE == null }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate tags for Docker image
        id: docker-image-tags
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_HOST }}/${{ github.repository_owner }}/${{ github.event.repository.name }}
          tags: |
            type=ref,event=branch,priority=30
            type=sha,priority=40

      - name: Print PR Head SHA
        run: echo "PR Head SHA - ${{ github.event.pull_request.head.sha }}"

      - name: Print image tags
        run: echo "${{ steps.image-tags.outputs.tags }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to the Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ env.IMAGE_PUSH_ENABLED }}
          tags: ${{ steps.docker-image-tags.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
